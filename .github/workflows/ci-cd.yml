name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# All sensitive values are now in GitHub secrets

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Test with Gradle
      run: ./gradlew test
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and save Docker image
      run: |
        docker build -t ${{ secrets.APP_NAME }} .
        docker save ${{ secrets.APP_NAME }} | gzip > ${{ secrets.APP_NAME }}.tar.gz

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/ec2_key
        chmod 600 ~/.ssh/ec2_key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Copy files via SCP
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        source: "${{ secrets.APP_NAME }}.tar.gz"
        target: "/home/${{ secrets.EC2_USER }}/"
        strip_components: 0

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          # Load the Docker image
          docker load -i /home/${{ secrets.EC2_USER }}/${{ secrets.APP_NAME }}.tar.gz
          
          # Stop and remove existing container if it exists
          if docker ps -a --format '{{.Names}}' | grep -q "^${{ secrets.APP_NAME }}$"; then
            docker stop ${{ secrets.APP_NAME }} || true
            docker rm ${{ secrets.APP_NAME }} || true
          fi
          
          # Run the container
          docker run -d \
            --name ${{ secrets.APP_NAME }} \
            -p 9000:9000 \
            -e PORT=9000 \
            --restart unless-stopped \
            ${{ secrets.APP_NAME }}
            
          # Clean up
          rm -f /home/${{ secrets.EC2_USER }}/${{ secrets.APP_NAME }}.tar.gz
          docker system prune -f
